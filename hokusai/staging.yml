---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exchange-web
  namespace: default
  labels:
    app: exchange
    component: web
    layer: application
spec:
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: exchange
      component: web
      layer: application
  template:
    metadata:
      labels:
        app: exchange
        component: web
        layer: application
      name: exchange-web
    spec:
      containers:
        - name: exchange-web
          ports:
            - name: exchange-http
              containerPort: 8080
          env:
            - name: PORT
              value: '8080'
            - name: RAILS_SERVE_STATIC_FILES
              value: 'true'
            - name: RAILS_LOG_TO_STDOUT
              value: 'true'
            - name: RAILS_ENV
              value: production
            - name: MALLOC_ARENA_MAX
              value: "2"
            - name: DATADOG_TRACE_AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: exchange-environment
          image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/exchange:staging
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              port: exchange-http
              path: /api/health
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                      - foreground

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exchange-sidekiq
  labels:
    app: exchange
    layer: application
    component: sidekiq
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: exchange
      layer: application
      component: sidekiq
  template:
    metadata:
      labels:
        app: exchange
        layer: application
        component: sidekiq
      name: exchange-sidekiq
      namespace: default
    spec:
      containers:
        - name: exchange-sidekiq
          env:
            - name: MALLOC_ARENA_MAX
              value: "2"
            - name: DD_TRACE_AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
          - configMapRef:
              name: exchange-environment
          image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/exchange:staging
          imagePullPolicy: Always
          command: ["bundle", "exec", "sidekiq"]
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                      - background

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: exchange-web
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: exchange-web
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: exchange
    component: web
    layer: application
  name: exchange-web-internal
  namespace: default
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: http
      targetPort: 8080
  selector:
    app: exchange
    layer: application
    component: web
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: exchange
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: "{{ cloudflareIpSourceRanges|join(',') }}"
spec:
  ingressClassName: nginx
  rules:
    - host: exchange-staging.artsy.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              serviceName: exchange-web-internal
              servicePort: http
